generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Define the User model
model User {
  id         Int      @id @default(autoincrement())
  name       String   @db.VarChar(100)
  email      String   @unique @db.VarChar(100)
  password   String   @db.VarChar(255)
  createdAt  DateTime @default(now()) @map("criado_em")
  status     StatusEmail     @map("Status")
  Receitas   Receita[] 
  Despesas   Despesa[] 
  Categorias Categoria[]
}

// Define the Receita model
model Receita {
  id          Int      @id @default(autoincrement())
  userId      Int
  date        DateTime @db.Date
  value       Decimal  @db.Decimal(10, 2)
  category    String   @db.VarChar(50)
  description String?  @db.VarChar(255)
  createdAt   DateTime @default(now()) @map("registrado_em")

  User User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Define the Despesa model
model Despesa {
  id              Int          @id @default(autoincrement())
  userId          Int
  date            DateTime     @db.Date
  value           Decimal      @db.Decimal(10, 2)
  category        String       @db.VarChar(50)
  paymentType     PaymentType
  description     String?      @db.VarChar(255)
  createdAt       DateTime     @default(now()) @map("registrado_em")
  transactionType String?      @db.VarChar(50)

  User     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  Parcelas Parcela[]
}

// Define the Parcela model
model Parcela {
  id            Int      @id @default(autoincrement())
  despesaId     Int
  parcelaNumber Int      @map("numero_parcela")
  value         Decimal  @db.Decimal(10, 2)
  dueDate       DateTime @db.Date @map("data_vencimento")
  status        Status   @default(PENDENTE)
  paymentDate   DateTime? @db.Date @map("data_pagamento") // Adicionada a coluna para a data de pagamento

  Despesa Despesa @relation(fields: [despesaId], references: [id], onDelete: Cascade)
}

// Define the Categoria model
model Categoria {
  id        Int      @id @default(autoincrement())
  userId    Int
  type      Tipo     @map("tipo")
  name      String   @db.VarChar(50)
  createdAt DateTime @default(now()) @map("criado_em")

  User User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Define the CreditCardDetails model
model CreditCardDetails {
  id             Int      @id @default(autoincrement())
  despesaId      Int
  installments   Int
  installmentValue Decimal @db.Decimal(10, 2)
}

// Define enums
enum PaymentType {
  DEBITO
  CREDITO
  PIX
  PARCELADO
  DINHEIRO
}

enum Status {
  PENDENTE
  PAGO
  PAGOANTECIPADO
}

enum StatusEmail {
  VERIFICACAOPENDENTE
  LIBERADO
  RECUSADO
}

enum Tipo {
  RECEITA
  DESPESA
  NEUTRO
}
